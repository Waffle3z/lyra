"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7721],{79198:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"type":"mdx","permalink":"/lyra/changelog","source":"@site/pages/changelog.md","title":"Changelog","description":"0.6.0","frontMatter":{},"unlisted":false}');var t=i(74848),l=i(28453);const r={},d="Changelog",o={},c=[{value:"0.6.0",id:"060",level:2},{value:"0.5.0-rc.0",id:"050-rc0",level:2},{value:"0.4.1",id:"041",level:2},{value:"0.4.0",id:"040",level:2},{value:"0.3.3",id:"033",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"changelog",children:"Changelog"})}),"\n",(0,t.jsx)(n.h2,{id:"060",children:"0.6.0"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Added ",(0,t.jsx)(n.code,{children:"updateImmutable"}),", ",(0,t.jsx)(n.code,{children:"updateImmutableAsync"}),", ",(0,t.jsx)(n.code,{children:"txImmutable"}),", ",(0,t.jsx)(n.code,{children:"txImmutableAsync"})," APIs","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This 'immutable' flavor of API lets you avoid deep copying, but forces you to handle copy-on-write semantics yourself. Instead of returning ",(0,t.jsx)(n.code,{children:"true"})," to commit a change, you return a new copy of the data containing the desired changes."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Removed ",(0,t.jsx)(n.code,{children:"splitUtf8String"})," implementation in favor of a simpler implementation"]}),"\n",(0,t.jsxs)(n.li,{children:["BREAKING: Removed ",(0,t.jsx)(n.code,{children:"disableReferenceProtection"})," in favor of smarter utilization of frozen tables"]}),"\n",(0,t.jsx)(n.li,{children:"Changed changedCallbacks to reconcile mutable changes into a copy-on-write table, making nested change detection easier"}),"\n",(0,t.jsx)(n.li,{children:"Fixed t absolute requires"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"050-rc0",children:"0.5.0-rc.0"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Commented (almost) the entire codebase"}),"\n",(0,t.jsx)(n.li,{children:"Expanded Moonwave generated API docs"}),"\n",(0,t.jsxs)(n.li,{children:["Added .luaurc (",(0,t.jsx)(n.a,{href:"https://github.com/paradoxum-games/lyra/issues/5",children:"#5"}),", thanks ",(0,t.jsx)(n.a,{href:"https://github.com/ffrostfall",children:"@ffrostfall"}),"!)"]}),"\n",(0,t.jsxs)(n.li,{children:["Change changedCallbacks to be -> () instead of -> () -> () (",(0,t.jsx)(n.a,{href:"https://github.com/paradoxum-games/lyra/issues/4",children:"#4"}),", thanks ",(0,t.jsx)(n.a,{href:"https://github.com/ffrostfall",children:"@ffrostfall"}),"!)"]}),"\n",(0,t.jsx)(n.li,{children:"Fixed a race condition with locks and added tests for it"}),"\n",(0,t.jsxs)(n.li,{children:["Fixed Promise absolute require (",(0,t.jsx)(n.a,{href:"https://github.com/paradoxum-games/lyra/issues/3",children:"#3"}),", thanks ",(0,t.jsx)(n.a,{href:"https://github.com/ffrostfall",children:"@ffrostfall"}),"!)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"041",children:"0.4.1"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Added tests for changedCallbacks"}),"\n",(0,t.jsx)(n.li,{children:"Simplified orphaned file cleanup implementation"}),"\n",(0,t.jsx)(n.li,{children:"Added file cleanup integration tests"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"040",children:"0.4.0"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Added ",(0,t.jsx)(n.code,{children:"PlayerStore:peek(userId)"}),", which returns a player's data without loading it into the store"]}),"\n",(0,t.jsxs)(n.li,{children:["Added ",(0,t.jsx)(n.code,{children:"disableReferenceProtection"})," option to ",(0,t.jsx)(n.code,{children:"PlayerStore.new()"}),", which improves performance by omitting a deep copy during updates"]}),"\n",(0,t.jsx)(n.li,{children:"Changed sharding to use JSON encoded buffers for compression"}),"\n",(0,t.jsx)(n.li,{children:"Fixed a bug where buffers wouldn't be copied for atomic updates"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"033",children:"0.3.3"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initial release"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var s=i(96540);const t={},l=s.createContext(t);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);