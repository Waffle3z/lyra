"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[976],{2053:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"intro","title":"Introduction","description":"While Lyra has been tested and is used in production, it\'s still in early development. Transactions, while tested in controlled environments, have not yet been battle-tested in production at scale.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/lyra/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/paradoxum-games/lyra/edit/main/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"defaultSidebar","next":{"title":"Getting Started","permalink":"/lyra/docs/getting-started"}}');var r=t(4848),i=t(8453);const s={sidebar_position:1},o="Introduction",l={},d=[{value:"Features",id:"features",level:2},{value:"Quick Example",id:"quick-example",level:2},{value:"Importing Existing Data",id:"importing-existing-data",level:2},{value:"Installation",id:"installation",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,r.jsxs)(n.admonition,{title:"Early Development",type:"danger",children:[(0,r.jsx)(n.p,{children:"While Lyra has been tested and is used in production, it's still in early development. Transactions, while tested in controlled environments, have not yet been battle-tested in production at scale."}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Avoid using Lyra in production games where data loss would be catastrophic until it has been tested more thoroughly."})}),(0,r.jsx)(n.p,{children:"Additionally, Lyra may occasionally output benign errors. These are being worked on and are not indicative of data loss or corruption."})]}),"\n",(0,r.jsx)(n.p,{children:"Lyra makes it easy to safely and robustly manage your game's player data. It's designed to handle large amounts of data, prevent common game-breaking bugs, and make it easy to update your data format without breaking existing saves."}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Transactions"})," - A powerful tool to implement features like trading, while making bugs like item duplication impossible"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session Locking"})," - Prevents common bugs that lead to corruption and data loss"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"})," - Ensures your data is always in a consistent state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Auto-Sharding"})," - Handles large data by automatically splitting across multiple DataStore keys"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Migrations"})," - Update your data format without breaking existing saves"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Drop-in"})," - Import your existing data and switch over seamlessly"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"quick-example",children:"Quick Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's what using Lyra looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local store = Lyra.createPlayerStore({\n    name = "PlayerData",\n    template = {\n        coins = 0,\n        inventory = {},\n    },\n    schema = t.strictInterface({\n        coins = t.number,\n        inventory = t.table,\n    }),\n})\n\n-- Load data when players join\nPlayers.PlayerAdded:Connect(function(player)\n    store:loadAsync(player)\nend)\n\n-- Safe updates with validation\nstore:updateAsync(player, function(data)\n    if data.coins < itemPrice then\n        return false -- Abort if can\'t afford\n    end\n    data.coins -= itemPrice\n    table.insert(data.inventory, itemId)\n    return true\nend)\n\n-- Atomic trades between players\nstore:txAsync({player1, player2}, function(state)\n    -- Either both changes happen or neither does\n    state[player1].coins -= 100\n    state[player2].coins += 100\n    return true\nend)\n'})}),"\n",(0,r.jsxs)(n.admonition,{title:"Avoid Stale Data",type:"warning",children:[(0,r.jsxs)(n.p,{children:["Always modify data through update functions. Never use data from a previous ",(0,r.jsx)(n.code,{children:":get()"})," call:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- \ud83d\udeab Don't do this:\nlocal oldData = store:getAsync(player)\nstore:updateAsync(player, function(newData)\n    if not oldData.claimedDailyReward then -- This data might be stale!\n        return false\n    end\n    newData.coins += 500\n    newData.claimedDailyReward = true\n    return true\nend)\n\n-- \u2705 Do this instead:\nstore:updateAsync(player, function(data)\n    if not data.claimedDailyReward then -- This data is always current\n        return false\n    end\n    data.coins += 500\n    data.claimedDailyReward = true\n    return true\nend)\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"importing-existing-data",children:"Importing Existing Data"}),"\n",(0,r.jsx)(n.p,{children:"When switching to Lyra, you can bring your existing data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local store = Lyra.createPlayerStore({\n    name = "PlayerData",\n    template = template,\n    schema = schema,\n    importLegacyData = function(key)\n        local success, data = pcall(function()\n            return YourCurrentSystem.getData(key)\n        end)\n        \n        if not success then\n            -- If there\'s an error, Lyra will kick the player and prompt them\n            -- to rejoin to try again.\n            error("Failed to reach data system")\n        end\n\n        if data ~= nil then\n            return data -- Return existing data to import\n        end\n        \n        return nil -- Return nil for new players to use template\n    end,\n})\n'})}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(n.p,{children:["Add to your ",(0,r.jsx)(n.code,{children:"wally.toml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'Lyra = "paradoxum-games/lyra@0.4.0"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Check out ",(0,r.jsx)(n.a,{href:"/lyra/docs/getting-started",children:"Getting Started"})," for a complete setup guide"]}),"\n",(0,r.jsxs)(n.li,{children:["Read ",(0,r.jsx)(n.a,{href:"/lyra/docs/core-concepts",children:"Core Concepts"})," to understand how Lyra works"]}),"\n",(0,r.jsxs)(n.li,{children:["See the Advanced Features section for ",(0,r.jsx)(n.a,{href:"/lyra/docs/advanced/migrations",children:"migration guides"})," and ",(0,r.jsx)(n.a,{href:"/lyra/docs/advanced/debugging",children:"debugging"})," tips"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);