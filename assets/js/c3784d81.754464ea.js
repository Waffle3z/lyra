"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77],{6130:e=>{e.exports=JSON.parse('{"functions":[{"name":"create","desc":"Creates a new PlayerStore with the given configuration.\\nConfiguration is similar to Store.createStore, but automatically adds player kick handling.\\n\\n```lua\\nlocal playerStore = PlayerStore.create({\\n\\tname = \\"PlayerData\\",\\n\\ttemplate = { coins = 0 },\\n\\tschema = function(data)\\n\\t\\treturn type(data.coins) == \\"number\\", \\"coins must be a number\\"\\n\\tend,\\n\\n\\t-- Optional: Runs whenever data changes\\n\\tchangedCallbacks = {\\n\\t\\tfunction(key, newData, oldData)\\n\\t\\t\\tprint(key, \\"changed from\\", oldData.coins, \\"to\\", newData.coins)\\n\\t\\tend,\\n\\t},\\n})\\n```\\n\\nPlayers will be automatically kicked with an error message if:\\n- Their data fails to load\\n- The DataStore lock is lost during their session","params":[{"name":"config","desc":"Configuration for the store","lua_type":"PlayerStoreConfig<T>"}],"returns":[{"desc":"","lua_type":"PlayerStore<T>"}],"function_type":"static","source":{"line":142,"path":"src/PlayerStore.luau"}},{"name":"_kickPlayer","desc":"Internal helper to kick players when data errors occur.","params":[{"name":"keyOrPlayer","desc":"","lua_type":"string | Player"},{"name":"message","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","private":true,"source":{"line":169,"path":"src/PlayerStore.luau"}},{"name":"get","desc":"Gets the current data for the given player.\\n\\n```lua\\nplayerStore:get(player):andThen(function(data)\\n\\tprint(player.Name, \\"has\\", data.coins, \\"coins\\")\\nend)\\n```","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"Resolves with the player\'s data","lua_type":"Promise<T>"}],"function_type":"method","errors":[{"lua_type":"\\"Key not loaded\\"","desc":"The player\'s data hasn\'t been loaded"},{"lua_type":"\\"Store is closed\\"","desc":"The store has been closed"}],"source":{"line":194,"path":"src/PlayerStore.luau"}},{"name":"getAsync","desc":"Syntactic sugar for `playerStore:get(player):expect()`.\\n\\nSee [PlayerStore:get]","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","source":{"line":204,"path":"src/PlayerStore.luau"}},{"name":"load","desc":"Loads data for the given player. Must be called before using other methods.\\n\\n```lua\\nplayerStore:load(player):andThen(function()\\n\\tprint(\\"Data loaded for\\", player.Name)\\nend)\\n```\\n\\n:::caution\\nIf loading fails, the player will be kicked from the game.\\n:::","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"Resolves when data is loaded","lua_type":"Promise"}],"function_type":"method","errors":[{"lua_type":"\\"Load already in progress\\"","desc":"Another load is in progress for this player"},{"lua_type":"\\"Store is closed\\"","desc":"The store has been closed"}],"source":{"line":226,"path":"src/PlayerStore.luau"}},{"name":"loadAsync","desc":"Syntactic sugar for `playerStore:load(player):expect()`.\\n\\nSee [PlayerStore:load]","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","source":{"line":239,"path":"src/PlayerStore.luau"}},{"name":"unload","desc":"Unloads data for the given player.\\n\\n```lua\\nplayerStore:unload(player):andThen(function()\\n\\tprint(\\"Data unloaded for\\", player.Name)\\nend)\\n```","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"Resolves when the update is complete, with a boolean indicating success","lua_type":"Promise<boolean>"}],"function_type":"method","errors":[{"lua_type":"\\"Store is closed\\"","desc":"The store has been closed"}],"source":{"line":256,"path":"src/PlayerStore.luau"}},{"name":"unloadAsync","desc":"Syntactic sugar for `playerStore:unload(player):expect()`.\\n\\nSee [PlayerStore:unload]","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","source":{"line":266,"path":"src/PlayerStore.luau"}},{"name":"update","desc":"Updates data for the given player using a transform function.\\nThe transform function must return true to commit changes, or false to abort.\\n\\n```lua\\nplayerStore:update(player, function(data)\\n\\tif data.coins < 100 then\\n\\t\\tdata.coins += 50\\n\\t\\treturn true -- Commit changes\\n\\tend\\n\\treturn false -- Don\'t commit changes\\nend)\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"transformFunction","desc":"","lua_type":"(data: T) -> boolean"}],"returns":[{"desc":"Resolves when the update is complete","lua_type":"Promise"}],"function_type":"method","errors":[{"lua_type":"\\"Key not loaded\\"","desc":"The player\'s data hasn\'t been loaded"},{"lua_type":"\\"Store is closed\\"","desc":"The store has been closed"},{"lua_type":"\\"Schema validation failed\\"","desc":"The transformed data failed schema validation"}],"source":{"line":290,"path":"src/PlayerStore.luau"}},{"name":"updateAsync","desc":"Syntactic sugar for `playerStore:update(player, transformFunction):expect()`.\\n\\nSee [PlayerStore:update]","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"transformFunction","desc":"","lua_type":"(data: T) -> boolean"}],"returns":[],"function_type":"method","source":{"line":300,"path":"src/PlayerStore.luau"}},{"name":"tx","desc":"Performs a transaction across multiple players\' data atomically.\\nAll players\' data must be loaded first. Either all changes apply or none do.\\n\\n```lua\\nplayerStore:tx({player1, player2}, function(state)\\n\\t-- Transfer coins between players\\n\\tif state[player1].coins >= 100 then\\n\\t\\tstate[player1].coins -= 100\\n\\t\\tstate[player2].coins += 100\\n\\t\\treturn true -- Commit transaction\\n\\tend\\n\\treturn false -- Abort transaction\\nend)\\n```","params":[{"name":"players","desc":"","lua_type":"{ Player }"},{"name":"transformFunction","desc":"","lua_type":"(state: { [Player]: T }) -> boolean"}],"returns":[{"desc":"Resolves when the transaction is complete","lua_type":"Promise"}],"function_type":"method","errors":[{"lua_type":"\\"Key not loaded\\"","desc":"One or more players\' data hasn\'t been loaded"},{"lua_type":"\\"Store is closed\\"","desc":"The store has been closed"},{"lua_type":"\\"Schema validation failed\\"","desc":"The transformed data failed schema validation"}],"source":{"line":326,"path":"src/PlayerStore.luau"}},{"name":"txAsync","desc":"Syntactic sugar for `playerStore:tx(players, transformFunction):expect()`.\\n\\nSee [PlayerStore:tx]","params":[{"name":"players","desc":"","lua_type":"{ Player }"},{"name":"transformFunction","desc":"","lua_type":"(state: { [Player]: T }) -> boolean"}],"returns":[],"function_type":"method","source":{"line":367,"path":"src/PlayerStore.luau"}},{"name":"save","desc":"Forces an immediate save of the given player\'s data.\\n\\n:::info\\nData is automatically saved periodically, so manual saves are usually unnecessary.\\n:::","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"Resolves when the save is complete","lua_type":"Promise"}],"function_type":"method","errors":[{"lua_type":"\\"Key not loaded\\"","desc":"The player\'s data hasn\'t been loaded"},{"lua_type":"\\"Store is closed\\"","desc":"The store has been closed"}],"source":{"line":383,"path":"src/PlayerStore.luau"}},{"name":"saveAsync","desc":"Syntactic sugar for `playerStore:save(player):expect()`.\\n\\nSee [PlayerStore:save]","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","source":{"line":393,"path":"src/PlayerStore.luau"}},{"name":"close","desc":"Closes the store and unloads all active sessions.\\nThe store cannot be used after closing.","params":[],"returns":[{"desc":"Resolves when the store is closed","lua_type":"Promise"}],"function_type":"method","source":{"line":404,"path":"src/PlayerStore.luau"}},{"name":"closeAsync","desc":"Syntactic sugar for `playerStore:close():expect()`.\\n\\nSee [PlayerStore:close]","params":[],"returns":[],"function_type":"method","source":{"line":413,"path":"src/PlayerStore.luau"}}],"properties":[],"types":[{"name":"PlayerStoreConfig","desc":"Configuration for creating a new Store.","fields":[{"name":"name","lua_type":"string","desc":"The name of the store"},{"name":"template","lua_type":"T","desc":"The template data for new keys"},{"name":"schema","lua_type":"(value: any) -> (boolean, string?)","desc":"A function to validate data"},{"name":"migrationSteps","lua_type":"{ MigrationStep }?","desc":"Optional migration steps"},{"name":"importLegacyData","lua_type":"((key: string) -> any?)?","desc":"Optional function to import legacy data"},{"name":"changedCallbacks","lua_type":"{ (key: string, newData: T, oldData: T?) -> () -> () }?","desc":"Optional callbacks for data changes"},{"name":"logCallback","lua_type":"((logMessage: LogMessage) -> ())?","desc":"Optional callback for log messages"}],"source":{"line":93,"path":"src/PlayerStore.luau"}}],"name":"PlayerStore","desc":"A PlayerStore wraps a regular Store to provide a more convenient API for working with Player data.\\nIt automatically converts Players to UserId keys and handles player kicks on data errors.\\n\\n```lua\\nlocal playerStore = PlayerStore.create({\\n\\tname = \\"PlayerData\\",\\n\\ttemplate = {\\n\\t\\tcoins = 0,\\n\\t\\titems = {},\\n\\t},\\n\\tschema = function(data)\\n\\t\\treturn type(data.coins) == \\"number\\" and type(data.items) == \\"table\\",\\n\\t\\t\\t\\"Invalid data format\\"\\n\\tend,\\n})\\n\\n-- Load data when player joins\\nPlayers.PlayerAdded:Connect(function(player)\\n\\tplayerStore:load(player):andThen(function()\\n\\t\\tprint(\\"Data loaded for\\", player.Name)\\n\\tend)\\nend)\\n\\n-- Unload data when player leaves\\nPlayers.PlayerRemoving:Connect(function(player)\\n\\tplayerStore:unload(player)\\nend)\\n```","source":{"line":41,"path":"src/PlayerStore.luau"}}')}}]);