"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[194],{2813:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"advanced/networking","title":"Network Updates","description":"When player data changes, you often need to notify clients to keep their UI in sync. Lyra provides a callback system through changedCallbacks to help manage these network updates.","source":"@site/docs/advanced/networking.md","sourceDirName":"advanced","slug":"/advanced/networking","permalink":"/lyra/docs/advanced/networking","draft":false,"unlisted":false,"editUrl":"https://github.com/paradoxum-games/lyra/edit/main/docs/advanced/networking.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Data Migrations","permalink":"/lyra/docs/advanced/migrations"},"next":{"title":"Debugging","permalink":"/lyra/docs/advanced/debugging"}}');var l=a(4848),r=a(8453);const s={sidebar_position:2},c="Network Updates",i={},d=[{value:"Understanding Change Callbacks",id:"understanding-change-callbacks",level:2},{value:"Multiple Callbacks",id:"multiple-callbacks",level:2},{value:"Data Safety",id:"data-safety",level:2},{value:"See Also",id:"see-also",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"network-updates",children:"Network Updates"})}),"\n",(0,l.jsxs)(n.p,{children:["When player data changes, you often need to notify clients to keep their UI in sync. Lyra provides a callback system through ",(0,l.jsx)(n.code,{children:"changedCallbacks"})," to help manage these network updates."]}),"\n",(0,l.jsx)(n.h2,{id:"understanding-change-callbacks",children:"Understanding Change Callbacks"}),"\n",(0,l.jsx)(n.p,{children:"Change callbacks are functions that run whenever data changes, whether through updates or transactions. They receive three parameters:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The key (player UserId as a string)"}),"\n",(0,l.jsx)(n.li,{children:"The new data (frozen to prevent mutations)"}),"\n",(0,l.jsx)(n.li,{children:"The previous data (if any, also frozen)"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Here's a basic example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Network = require(ReplicatedStorage.Network)\n\nlocal function syncWithClient(key: string, newData, oldData)\n    local player = Players:GetPlayerByUserId(tonumber(key))\n    if not player then return end\n    \n    -- Send only changed data\n    local changes = {}\n    if newData.coins ~= oldData.coins then\n        changes.coins = newData.coins\n    end\n    if not Tables.deepEquals(newData.inventory, oldData.inventory) then\n        changes.inventory = newData.inventory\n    end\n    \n    -- Send changes to client\n    Network.PlayerData:FireClient(player, changes)\nend\n\nlocal store = Lyra.createPlayerStore({\n    name = "PlayerData",\n    template = template,\n    schema = schema,\n    changedCallbacks = { syncWithClient },\n})\n'})}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsx)(n.p,{children:"Compare old and new data to send only changed values, reducing network traffic."})}),"\n",(0,l.jsx)(n.h2,{id:"multiple-callbacks",children:"Multiple Callbacks"}),"\n",(0,l.jsx)(n.p,{children:"While changedCallbacks are primarily used for networking, you can register multiple callbacks if needed. Each callback receives the same read-only data:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local store = Lyra.createPlayerStore({\n    changedCallbacks = { \n        -- Keep clients in sync\n        syncWithClient,\n        \n        -- Log changes for debugging\n        function(key, newData, oldData)\n            print(`Player {key} data changed`)\n        end,\n    },\n})\n"})}),"\n",(0,l.jsx)(n.h2,{id:"data-safety",children:"Data Safety"}),"\n",(0,l.jsx)(n.p,{children:"Change callbacks receive frozen copies of the data. This means the data is read-only and cannot be modified:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local function callback(key, newData, oldData)\n    -- \u274c This will error - data is frozen\n    newData.coins = 100\nend\n"})}),"\n",(0,l.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/lyra/docs/core-concepts",children:"Core Concepts"})," for understanding data management"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/lyra/docs/getting-started",children:"Getting Started"})," for basic setup"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var t=a(6540);const l={},r=t.createContext(l);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);